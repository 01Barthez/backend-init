services:
  backend:
    build: .
    container_name: ${APP_NAME:-backend_api}
    env_file: .env
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mailhog:
        condition: service_started
    environment:
      DATABASE_URL: 'mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/${MONGO_DB}?replicaSet=rs0&authSource=admin'
    ports:
      - '${PORT:-3000}:3000'
    networks:
      - backend_network
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=${PORT:-3000}'
      - 'prometheus.path=/metrics'

  mongo:
    image: mongo:6.0-jammy
    container_name: ${MONGO_NAME:-mongo_db}
    restart: always
    entrypoint: ['/scripts/start-mongo.sh']
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-securepassword}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-admin}
    volumes:
      - ./mongo-keyfile:/mongo-keyfile:ro
      - ./scripts/start-mongo.sh:/scripts/start-mongo.sh:ro
      - mongo_data:/data/db
    ports:
      - '${MONGO_PORT:-27017}:27017'
    networks:
      - backend_network
    healthcheck:
      test:
        [
          'CMD',
          'mongosh',
          '-u',
          '${MONGO_USER:-admin}',
          '-p',
          '${MONGO_PASSWORD:-securepassword}',
          '--authenticationDatabase',
          'admin',
          '--eval',
          "rs.status().ok || rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}).ok",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 90s
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=9216'

  redis:
    image: redis:8-alpine
    container_name: ${REDIS_NAME:-redis_cache}
    restart: always
    command: ['redis-server', '--appendonly', 'yes']
    ports:
      - '${REDIS_PORT:-6379}:6379'
    networks:
      - backend_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=9121'

  minio:
    image: minio/minio
    container_name: ${MINIO_NAME:-minio_storage}
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports:
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE:-9001}:9001'
    volumes:
      - minio_data:/data
    networks:
      - backend_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/ready']
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=${MINIO_PORT:-9000}'

  mailhog:
    image: mailhog/mailhog
    container_name: ${SMTP_NAME:-mail}
    ports:
      - '${SMTP_PORT:-1025}:1025' # SMTP
      - '${SMTP_WEB_UI:-8025}:8025' # Web UI
    networks:
      - backend_network

  nginx:
    image: nginx:stable-alpine
    container_name: ${NGINX_NAME:-nginx}
    depends_on:
      - backend
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - '${NGINX_PORT:-80}:80'
      - '${NGINX_SSH:-443}:443'
    networks:
      - backend_network

volumes:
  mongo_data:
  minio_data:

networks:
  backend_network:
    driver: bridge
    attachable: true
