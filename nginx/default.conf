user  nginx;
worker_processes  auto;
worker_rlimit_nofile 65535;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  8192;
    use epoll;                    # linux: epoll is best
    multi_accept on;
}

http {
    ## -----------------------
    ## Basic performance
    ## -----------------------
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    server_tokens       off;              # hide nginx version
    client_max_body_size 50M;             # adjust to your needs

    # buffers
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;

    ## -----------------------
    ## Timeouts (protects resources)
    ## -----------------------
    client_body_timeout 12s;
    client_header_timeout 12s;
    send_timeout 10s;

    ## -----------------------
    ## SSL / TLS global settings
    ## -----------------------
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;                # recommended for forward secrecy
    ssl_buffer_size 4k;

    # Strong ciphers (modern + compat). Tweak to your policy.
    ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305';

    # Optional DH param (generate with openssl and set path)
    ssl_dhparam /etc/ssl/certs/dhparam.pem;   # generate if you want: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

    # OCSP stapling (requires valid certs and correct CA chain)
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    ## -----------------------
    ## Compression: gzip + optional brotli
    ## -----------------------
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/ld+json;

    # If your Nginx has brotli module, enable instead/beside gzip:
    # brotli on;
    # brotli_comp_level 5;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/ld+json;

    ## -----------------------
    ## Caching (proxy cache for upstream responses)
    ## -----------------------
    proxy_cache_path /var/cache/nginx/proxy_cache levels=1:2 keys_zone=proxy_cache:100m inactive=60m max_size=10g;
    proxy_temp_path /var/cache/nginx/proxy_temp;

    ## -----------------------
    ## Rate limiting / connection limiting
    ## -----------------------
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=20r/s;

    ## -----------------------
    ## Log format (adds request_time)
    ## -----------------------
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" $request_time';

    access_log /var/log/nginx/access.log main;

    ## -----------------------
    ## Include site-specific confs (recommended)
    ## -----------------------
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # load virtual hosts
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    ## -----------------------
    ## Security headers snippet (can be included in servers)
    ## -----------------------
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Deny suspicious user agents (example)
    # map $http_user_agent $blocked_ua {
    #     default 0;
    #     "~*malicious" 1;
    # }
    # if ($blocked_ua) { return 444; }

    ## -----------------------
    ## Internal status endpoint (protected)
    ## -----------------------
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        location /nginx_status {
            stub_status;
            allow 127.0.0.1;
            deny all;
        }
        access_log off;
    }

    ## -----------------------
    ## Upstream (example: app servers)
    ## -----------------------
    upstream backend_app {
        # list your app instances here (use private IPs or unix sockets)
        server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    ## -----------------------
    ## Example default site (HTTP -> HTTPS redirect)
    ## -----------------------
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name example.com www.example.com;
        server_tokens off;

        # Let's redirect all to https
        location /.well-known/acme-challenge/ {
            # Allow Let's Encrypt ACME challenge to pass through
            root /var/www/letsencrypt;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    ## -----------------------
    ## HTTPS server block (main)
    ## -----------------------
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name example.com www.example.com;

        # TLS certs - replace with your real cert + key paths (PEM)
        ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
        # ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;

        # Security headers (adjust CSP to your app)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # Content-Security-Policy: tailor to your app, don't use this blindly
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https:; object-src 'none';" always;

        # Logging / limits
        access_log /var/log/nginx/example.access.log main;
        error_log /var/log/nginx/example.error.log warn;

        # Limit connections & requests per IP
        limit_conn addr 10;
        limit_req zone=req_limit_per_ip burst=40 nodelay;

        # Protect from too slow slowloris style attacks with timeouts above

        ## Static files - cache aggressively
        location ~* \.(?:css|js|jpg|jpeg|png|gif|ico|svg|woff2|ttf|eot|otf|mp4|webm)$ {
            root /var/www/example.com/html;
            try_files $uri =404;
            expires 30d;
            add_header Cache-Control "public, must-revalidate";
            access_log off;
        }

        ## Health check endpoint (example)
        location = /healthz {
            proxy_pass http://backend_app/healthz;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 5s;
            allow 127.0.0.1;    # lock to trusted networks if possible
            allow 10.0.0.0/8;
            deny all;
        }

        ## Main reverse proxy to backend app
        location / {
            proxy_pass http://backend_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # timeouts for upstream
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # buffers (tweak if you proxy large headers/responses)
            proxy_buffer_size 8k;
            proxy_buffers 4 32k;
            proxy_busy_buffers_size 64k;

            # Enable proxy cache for GETs if your app is cacheable (adjust rules)
            proxy_cache proxy_cache;
            proxy_cache_bypass $http_cache_control;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            add_header X-Proxy-Cache $upstream_cache_status;
        }

        ## Deny access to hidden files
        location ~ /\.(?!well-known) {
            deny all;
            access_log off;
            log_not_found off;
        }

        ## Error pages - serve local static pages (customize)
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    ## -----------------------
    ## Optional: Admin / management server (on a private IP)
    ## -----------------------
    # server {
    #     listen 127.0.0.1:8443 ssl;
    #     server_name internal.example.com;
    #     ssl_certificate /path/to/cert.pem;
    #     ssl_certificate_key /path/to/key.pem;
    #     location / {
    #         proxy_pass http://127.0.0.1:9000;
    #     }
    # }

}
