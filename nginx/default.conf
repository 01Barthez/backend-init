# Nginx Configuration
# ==================
# This configuration combines performance, security, and maintainability best practices.
# All settings include explanatory comments for better understanding and maintenance.

# User and process configuration
# ------------------------------
user nginx;
worker_processes auto;  # Automatically set based on CPU cores
worker_rlimit_nofile 100000;  # Maximum number of open files per worker

# Error logging
# -------------
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Event context configuration
# --------------------------
events {
    worker_connections 8192;  # Connections per worker
    multi_accept on;          # Accept multiple connections at once
    use epoll;                # Efficient method for Linux
    
    # Optimize for many connections with multiple workers
    accept_mutex on;
    accept_mutex_delay 100ms;
}

# HTTP context
# -----------
http {
    # MIME types and default type
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Basic performance settings
    # -------------------------
    sendfile on;              # Use sendfile for static files
    tcp_nopush on;           # Optimize sendfile packets
    tcp_nodelay on;          # Disable Nagle's algorithm
    keepalive_timeout 30s;   # Time to keep connections open
    keepalive_requests 100;  # Number of requests per connection
    reset_timedout_connection on;  # Recycle timed-out connections
    
    # Buffer size optimizations
    # ------------------------
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    output_buffers 2 1m;
    postpone_output 1460;
    
    # Timeouts
    # --------
    client_body_timeout 12s;
    client_header_timeout 12s;
    send_timeout 10s;
    
    # SSL/TLS Configuration
    # --------------------
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # Modern cipher suite (as of 2023)
    ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    
    # Enable 0-RTT for TLS 1.3 (be cautious with state-changing requests)
    ssl_early_data on;
    
    # Enable OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Enable HTTP/2 and HTTP/3 (QUIC)
    # -------------------------------
    http2 on;
    http2_max_concurrent_streams 100;
    http2_stream_buffer_size 256k;
    
    # Uncomment for HTTP/3 (requires Nginx 1.25+ with QUIC module)
    # quic_retry on;
    # add_header Alt-Svc 'h3=":443"; ma=86400, h3-29=":443"; ma=86400';
    
    # Compression
    # ----------
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;
    
    # Brotli compression (if installed)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_static on;
    # brotli_types *;  # Match all MIME types
    
    # Security Headers
    # ---------------
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), midi=(), sync-xhr=(), microphone=(), camera=(), magnetometer=(), gyroscope=(), fullscreen=(self), payment=()" always;
    
    # HSTS (uncomment after testing SSL)
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # Rate limiting
    # ------------
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Cache configuration
    # -----------------
    proxy_cache_path /var/cache/nginx/proxy_cache 
        levels=1:2 
        keys_zone=proxy_cache:100m 
        inactive=60m 
        max_size=10g 
        use_temp_path=off;
    
    proxy_temp_path /var/cache/nginx/proxy_temp;
    
    # Logging format
    # -------------
    log_format main '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main buffer=512k flush=1m;
    
    # Server blocks
    # ------------
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        
        # Redirect all HTTP to HTTPS
        return 301 https://$host$request_uri;
    }
    
    server {
        # HTTP/2 with SSL
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        
        # HTTP/3 (QUIC) - uncomment if supported
        # listen 443 quic reuseport;
        # listen [::]:443 quic reuseport;
        
        server_name example.com www.example.com;
        
        # SSL certificates
        ssl_certificate /etc/ssl/certs/example.com.crt;
        ssl_certificate_key /etc/ssl/private/example.com.key;
        
        # Security headers
        server_tokens off;
        
        # Root and index files
        root /usr/share/nginx/html;
        index index.html index.htm;
        
        # Static file handling
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff2?|svg|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, no-transform";
            access_log off;
            log_not_found off;
            
            # Enable gzip for static files
            gzip_static on;
        }
        
        # API proxy configuration
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache settings
            proxy_cache proxy_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 'OK';
        }
        
        # Nginx status endpoint (restricted)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
        
        # Security: Block hidden files
        location ~ /\.(?!well-known) {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
    }
    
    # Include additional configs
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
