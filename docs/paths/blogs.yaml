# Blog Posts Endpoints
/blogs:
  get:
    tags:
      - Blogs
    summary: Get all blog posts
    description: Retrieve a paginated list of published blog posts with optional filtering
    parameters:
      - $ref: '../components/parameters/page.yaml'
      - $ref: '../components/parameters/limit.yaml'
      - $ref: '../components/parameters/sortBy.yaml'
      - $ref: '../components/parameters/order.yaml'
      - in: query
        name: category
        schema:
          type: string
        description: Filter posts by category
      - in: query
        name: tag
        schema:
          type: string
        description: Filter posts by tag
      - in: query
        name: search
        schema:
          type: string
        description: Search term to filter posts by title or content
    responses:
      '200':
        description: A list of blog posts
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    $ref: '../components/schemas/BlogPost.yaml'
                pagination:
                  $ref: '../components/schemas/Pagination.yaml'
      '500':
        $ref: '../components/responses/ServerError.yaml'

  post:
    tags:
      - Blogs
    summary: Create a new blog post
    description: Create a new blog post (Admin/Author only)
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/BlogPost.yaml'
    responses:
      '201':
        description: Blog post created successfully
        content:
          application/json:
            schema:
              $ref: '../components/responses/SuccessResponse.yaml'
              properties:
                data:
                  $ref: '../components/schemas/BlogPost.yaml'
      '400':
        $ref: '../components/responses/BadRequest.yaml'
      '401':
        $ref: '../components/responses/Unauthorized.yaml'
      '403':
        $ref: '../components/responses/Forbidden.yaml'
      '500':
        $ref: '../components/responses/ServerError.yaml'

/blogs/slug/{slug}:
  get:
    tags:
      - Blogs
    summary: Get blog post by slug
    description: Retrieve a single published blog post by its slug
    parameters:
      - name: slug
        in: path
        required: true
        description: URL-friendly version of the blog post title
        schema:
          type: string
          example: 'getting-started-with-nodejs'
    responses:
      '200':
        description: Blog post details
        content:
          application/json:
            schema:
              $ref: '../components/responses/SuccessResponse.yaml'
              properties:
                data:
                  $ref: '../components/schemas/BlogPost.yaml'
      '404':
        $ref: '../components/responses/NotFound.yaml'
      '500':
        $ref: '../components/responses/ServerError.yaml'

/blogs/{id}:
  get:
    tags:
      - Blogs
    summary: Get blog post by ID
    description: Retrieve a single blog post by its ID (Admin/Author only for unpublished posts)
    security:
      - bearerAuth: []
    parameters:
      - $ref: '../components/parameters/id.yaml'
    responses:
      '200':
        description: Blog post details
        content:
          application/json:
            schema:
              $ref: '../components/responses/SuccessResponse.yaml'
              properties:
                data:
                  $ref: '../components/schemas/BlogPost.yaml'
      '401':
        $ref: '../components/responses/Unauthorized.yaml'
      '403':
        $ref: '../components/responses/Forbidden.yaml'
      '404':
        $ref: '../components/responses/NotFound.yaml'
      '500':
        $ref: '../components/responses/ServerError.yaml'

  put:
    tags:
      - Blogs
    summary: Update a blog post
    description: Update an existing blog post (Admin/Author only)
    security:
      - bearerAuth: []
    parameters:
      - $ref: '../components/parameters/id.yaml'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/BlogPost.yaml'
    responses:
      '200':
        description: Blog post updated successfully
        content:
          application/json:
            schema:
              $ref: '../components/responses/SuccessResponse.yaml'
              properties:
                data:
                  $ref: '../components/schemas/BlogPost.yaml'
      '400':
        $ref: '../components/responses/BadRequest.yaml'
      '401':
        $ref: '../components/responses/Unauthorized.yaml'
      '403':
        $ref: '../components/responses/Forbidden.yaml'
      '404':
        $ref: '../components/responses/NotFound.yaml'
      '500':
        $ref: '../components/responses/ServerError.yaml'

  delete:
    tags:
      - Blogs
    summary: Delete a blog post
    description: Delete a blog post (Admin/Author only)
    security:
      - bearerAuth: []
    parameters:
      - $ref: '../components/parameters/id.yaml'
    responses:
      '200':
        description: Blog post deleted successfully
        content:
          application/json:
            schema:
              $ref: '../components/responses/SuccessResponse.yaml'
      '401':
        $ref: '../components/responses/Unauthorized.yaml'
      '403':
        $ref: '../components/responses/Forbidden.yaml'
      '404':
        $ref: '../components/responses/NotFound.yaml'
      '500':
        $ref: '../components/responses/ServerError.yaml'
